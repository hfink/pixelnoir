# Copyright (c) 2010 Heinrich Fink <hf (at) hfink (dot) eu>, 
#                    Thomas Weber <weber (dot) t (at) gmx (dot) at>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
import platform

Import('env')
Import('config')
Import('python_exe')

env.Append(CPPPATH = 'src')
env.Append(CPPPATH = '#/build/src_generated/collada_bakery')

if platform.system() == 'Linux':
    env.Append(LIBPATH = '#/ColladaBakery/external/OpenCollada/lib/linux')

    env.Append(LIBS = 'libOpenCOLLADASaxFrameworkLoader.a')
    env.Append(LIBS = 'libGeneratedSaxParser.a')
    env.Append(LIBS = 'libOpenCOLLADAFramework.a')
    env.Append(LIBS = 'libOpenCOLLADABaseUtils.a')
    env.Append(LIBS = 'libMathMLSolver.a')
    env.Append(LIBS = 'pcre')
    env.Append(LIBS = 'libUTF.a')
    env.Append(LIBS = 'xml2')

elif platform.system() == 'Windows':
    env.Append(LIBPATH = '#/external/OpenCollada/lib/static/%s' % config)

    env.Append(LIBS = 'buffer.lib')
    env.Append(LIBS = 'ftoa.lib')
    env.Append(LIBS = 'GeneratedSaxParser.lib')
    env.Append(LIBS = 'MathMLSolver.lib')
    env.Append(LIBS = 'OpenCOLLADABaseUtils.lib')
    env.Append(LIBS = 'OpenCOLLADAFramework.lib')
    env.Append(LIBS = 'OpenCOLLADASaxFrameworkLoader.lib')
    env.Append(LIBS = 'OpenCOLLADAStreamWriter.lib')
    env.Append(LIBS = 'pcre.lib')
    env.Append(LIBS = 'UTF.lib')
    env.Append(LIBS = 'xml.lib')

    env.SideEffect(['#/build/bin/%s/collada_bakery.lib' % config, 
                    '#/build/bin/%s/collada_bakery.exp' % config,
                    '#/build/bin/Debug/collada_bakery.ilk', 
                    '#/build/bin/Debug/collada_bakery.pdb', 
                    'vc100.idb', 'vc100.pdb'],
                    '#/build/bin/%s/collada_bakery' % config)

env.Append(CPPPATH = '#/external/OpenCollada/include/COLLADABaseUtils')
env.Append(CPPPATH = '#/external/OpenCollada/include/COLLADAFramework')
env.Append(CPPPATH = '#/external/OpenCollada/include/COLLADASaxFrameworkLoader')
env.Append(CPPPATH = '#/external/OpenCollada/include/GeneratedSaxParser')

env.Command(['#/build/src_generated/collada_bakery/ColladaBakeryConfig.cpp', 
             '#/build/src_generated/collada_bakery/ColladadBakeryConfig.h'], 
            ['#/collada_bakery/src/config.xml'] + Glob('#/tools/config*'), 
            python_exe+' tools/configGen.py collada_bakery/src/config.xml -Dbuild/src_generated/collada_bakery -Hh -Ccpp')

# This used to make sure the src generation is finished before compilation
# of main source during parallel builds
env.SideEffect(['#/build/src_gen_lock'], 
               ['#/build/src_generated/collada_bakery/ColladaBakeryConfig.cpp', 
                '#/build/src_generated/collada_bakery/ColladadBakeryConfig.h'])

objects = []

o = env.Object(Glob('#/build/src_generated/collada_bakery/*.cpp'))
objects.append(o)

o = env.Object('#/build/src_generated/rtr_format.pb.cc')
objects.append(o)

o = SConscript('src/SConscript', 
                variant_dir='#/build/intermediate/%s/collada_bakery' % config, duplicate=0)
objects.append(o)

env.Program('#/build/bin/%s/collada_bakery' % config, objects)